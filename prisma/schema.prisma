generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    SELLER
    ADMIN
}

enum ProductType {
    TEMPLATES
    UIKITS
    ICONS
}

enum Plan {
    basic
    pro
    enterprise
}

model User {
    id        String   @id @default(cuid())
    kindUserId String @unique
    email     String   @unique
    name      String?
    profilePic String?
    StripeId  String?
    onBoarding OnBoarding?
    subscription Subscription?
    products  Product[]
    orders    Order[] // if only user is seller
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OnBoarding {
    id        String   @id @default(cuid())
    kindUserId    String @unique
    role      Role    @default(USER)
    city      String
    state     String
    country   String
    zip       String
    user      User      @relation(fields: [kindUserId], references: [kindUserId])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Product {
    id          String      @id @default(cuid())
    sellerId    String
    name        String
    shortDescription String
    longDescription  String
    price       Float
    productType     ProductType
    thumbnail      Thumbnail[]
    productUrl     String
    order         Order[]
    seller      User        @relation(fields: [sellerId], references: [kindUserId])
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model Thumbnail {
    id        String   @id @default(cuid())
    productId String
    url       String
    key       String
    product   Product @relation(fields: [productId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Subscription {
    id        String   @id @default(cuid())
    kindUserId    String @unique
    plan      Plan
    startDate DateTime?
    endDate   DateTime?
    user      User   @relation(fields: [kindUserId], references: [kindUserId])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum OrderStatus {
    PENDING
    COMPLETED
    CANCELLED
}

model Order{
    id        String   @id @default(cuid())
    sellerId  String // who is selling the product
    userId    String // who is buying the product
    productId String // which product is being bought
    amount    Float
    isPaid    Boolean @default(false)
    status    OrderStatus @default(PENDING)
    shippingDetails ShippingDetails?
    product   Product @relation(fields: [productId], references: [id])
    seller    User   @relation(fields: [sellerId], references: [kindUserId])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ShippingDetails {
    id        String   @id @default(cuid())
    orderId   String  @unique
    address   String
    city      String
    state     String?
    postalCode String
    country   String
    order     Order @relation(fields: [orderId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

